"""
There are two main approaches to solve this problem:
  - Backtracking with pruning (technically still O(k^n))
  - Bitmask + DP (binary state compression), with complexity O(2^n)

This solution uses backtracking with pruning.

-----------------------------------------------------
🧠 Idea:
- First, calculate the target sum of each subset: target = sum(nums) / k.
  - If sum(nums) is not divisible by k, return False immediately.

- Sort nums in descending order to place large numbers first — this helps prune invalid paths early.

- Use a recursive function to try placing each number into one of the k buckets:
    - If placing nums[idx] into a bucket causes the sum to exceed the target, skip that bucket.
    - If the number fits, add it to the bucket and recurse to place the next number.
    - If the recursive call fails (dead-end), backtrack by removing the number from the bucket.
    - Continue trying other buckets.

- Base case:
    - If all numbers are placed (i.e., idx == len(nums)), check that all buckets sum to exactly target.
    - If so, return True; otherwise, return False.

- Pruning tricks:
    - Skip placing a number into a bucket if it is identical to the previous bucket's value (i.e., `bucket[i] == bucket[i-1]`), to avoid exploring symmetric states.
    - If a number can’t be placed in any bucket, return False early.
  Why this Pruning works: 
    Logic:
    If two buckets have the same current sum, placing nums[idx] into both is redundant — it'll lead to the same state.
    Why?
    Buckets are unordered. Swapping nums[x] between two identical buckets doesn’t change the total state — it's symmetric.
    This pruning avoids exponential branching caused by symmetric permutations.

-----------------------------------------------------
🧮 Time Complexity:
- Worst-case: O(k^n), where n = len(nums)
- With pruning and early checks (like skipping over duplicate bucket states and big numbers first), performance improves significantly in practice.

-----------------------------------------------------
🗃️ Space Complexity:
- O(k) for the bucket sum array
- O(n) call stack for recursion
"""


class Solution:
    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
        total = sum(nums)
        target = total // k
        if total % k != 0:
            return False
        nums.sort(reverse = True)
        bucket_map = [0 for i in range(k)]
        def backtrack(idx):
            if idx == len(nums):
                for sums in bucket_map:
                    if sums != target:
                        return False
                return True
            for i in range(k):
                if bucket_map[i] + nums[idx] > target:
                    continue
                if i > 0 and bucket_map[i] == bucket_map[i-1]:
                    continue
                bucket_map[i] += nums[idx]
                if backtrack(idx + 1):
                    return True
                bucket_map[i] -= nums[idx]

            return False
        
        return backtrack(0)
