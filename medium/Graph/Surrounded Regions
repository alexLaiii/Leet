class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        M, N = len(board), len(board[0])

        def dfs(r,c):
            if r < 0 or c < 0 or r >= M or c >= N or board[r][c] == "X" or (r,c) in notSurrounded:
                return
            
            notSurrounded.add((r,c))
            directions = [[1,0], [-1,0], [0,1], [0,-1]]
            for dr, dc in directions:
                dfs(r+dr, c + dc)
    
        
        notSurrounded = set()
        for i in range(N):
            if board[0][i] == "O":
                dfs(0, i)
            if board[M-1][i] == "O":
                dfs(M-1, i)
        
        for i in range(M):
            if board[i][0] == "O":
                dfs(i, 0)
            if board[i][N-1] == "O":
                dfs(i, N-1)
        
      
        for i in range(M):
            for j in range(N):
                if (i,j) not in notSurrounded and board[i][j] == "O":
                    board[i][j] = "X"
