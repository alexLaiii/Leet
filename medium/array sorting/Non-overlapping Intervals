"""
❓ Why does sorting by end time guarantee the minimum number of intervals to remove?
Because:
Greedy by earliest end time always leaves the most room for future intervals.
"""

class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        intervals.sort(key=lambda x:x[1])
        res, currEnd = 0, intervals[0][1]
        
        for i in range(1, len(intervals)):
            start, end = intervals[i][0], intervals[i][1]
        
            if currEnd > start:
                # This pair needs to be remove
                # Since we sort the intervals by end, if we dont change it, the currEnd is always smaller than the later end, so no min(currEnd, end) needed
                res += 1
            else:
                # We can keep this pair
                # keeping it will increasing the end, so we have to change it.
                currEnd = end
        return res
