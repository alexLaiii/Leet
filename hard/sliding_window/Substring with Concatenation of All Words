"""
This problem absolutely humbled me.

One of the hardest sliding window problems I've done. The solution is very counterintuitive.

ðŸ”» Failed Attempts:

1. **Brute Force (Sliding by 1 char, check every window):**
   - I slid the window one character at a time and checked if each window contained all the words using a hashmap.
   - It worked logically but timed out due to O(n * m * k) complexity â€” as expected.

2. **Optimized Sliding by 1 char (Add one char, remove one char):**
   - I tried maintaining a rolling count of words by adding and removing words as substrings of size `k`.
   - It failed for cases like:
     ```
     s = "ababaa", words = ["ab", "ba", "ba"]
     ```
     - It falsely counted words: e.g., it saw both `"ab"` and `"ba"` multiple times because the sliding by 1 char overlaps substrings incorrectly.
     - Result: It ended up with `{ab: 2, ba: 2}` when that window doesn't even exist properly â€” the cuts are invalid.

âœ… **Correct Approach: Sliding Window with Offsets (Word-level):**

- **Key Insight:** Slide by **word length**, not by character. Since the problem ensure Every word has the same length, so:
  - No word is a substring of another.
  - All valid matches must align to a word boundary.

- **Offset windows:** To handle all alignment cases, loop from `offset = 0` to `k - 1`.
  - For example, if `k = 3`, check starting indices 0, 1, and 2 separately.
  - This ensures we catch all valid windows that align with word boundaries.

---

ðŸ”§ Implementation Details:

- Let `k = len(words[0])` (length of each word)
- `words_map`: frequency count of words in the input list `words`
- `seen`: sliding window frequency map
- `matches`: number of words where `seen[word] == words_map[word]`
- `req_matches = len(words_map)`
- For each offset:
  - Initialize `l = r = offset`
  - Slide the window in steps of `k`
  - If window size exceeds `k * len(words)`, because the windows are only valid iff (size == k * len(words)), remove the leftmost word
  - If `matches == req_matches`, record `l` as a valid start index

---

ðŸ“ˆ Time Complexity:
- `O(n)`: Outer loop runs `k` times, inner loop runs `n/k` times â†’ `O(k * n/k) = O(n)`

ðŸ“¦ Space Complexity:
- `O(m * k)` for hash maps, where `m = len(words)`

---
This problem is deceptively hard because:
- It's easy to write something that "mostly works" but breaks on offset or frequency edge cases.
- You must fully control the window at the **word level**, and get all frequency updates exactly right.

Lesson: Think in **chunks**, not characters.
"""


class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        # Sliding by words
        k = len(words[0])
        if len(s) < k * len(words):
            return []
        
        words_map = {}
        for w in words:
            words_map[w] = 1 + words_map.get(w, 0)
        res, req_match = [], len(words_map) 
        for offset in range(k):
            l = r = offset
            seen = {}
            curr_match = 0
            while r + k <= len(s):
                if r + k - l > k * len(words):
                    rm_w = s[l : l + k]
                    if rm_w in words_map:
                        if seen[rm_w] == words_map[rm_w]:
                            curr_match -= 1
                        seen[rm_w] -= 1
                    l += k
                new_w = s[r: r+k]
                if new_w in words_map:
                    seen[new_w] = 1 + seen.get(new_w, 0)
                    if seen[new_w] == words_map[new_w]:
                        curr_match += 1
                    if curr_match == req_match:
                        res.append(l)
                r += k
        return res
        
                
            
        
